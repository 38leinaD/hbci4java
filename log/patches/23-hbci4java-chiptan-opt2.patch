Index: src/org/kapott/hbci/manager/FlickerCode.java
===================================================================
RCS file: /cvsroot/hibiscus/hbci4java/src/org/kapott/hbci/manager/FlickerCode.java,v
retrieving revision 1.5
diff -u -r1.5 FlickerCode.java
--- src/org/kapott/hbci/manager/FlickerCode.java	27 May 2011 11:23:13 -0000	1.5
+++ src/org/kapott/hbci/manager/FlickerCode.java	27 May 2011 15:45:31 -0000
@@ -1,7 +1,7 @@
 /**********************************************************************
  * $Source: /cvsroot/hibiscus/hbci4java/log/patches/23-hbci4java-chiptan-opt2.patch,v $
- * $Revision: 1.1 $
- * $Date: 2011/05/27 15:46:13 $
+ * $Revision: 1.1 $
+ * $Date: 2011/05/27 15:46:13 $
  * $Author: willuhn $
  *
  * Copyright (c) by willuhn - software & services
@@ -60,6 +60,9 @@
    * Die Anzahl der Bytes, in der die Laenge des Challenge steht.
    * Bei HHD 1.3 war das noch 2 Zeichen lang.
    * Ich habe keine Ahnung, woran ich erkennen kann, wenn der nur 2 Stellen lang ist.
+   * Wenn der Flicker-Code nicht in "Challenge HHDuc" uebertragen wurde
+   * sondern direkt im Freitext-Challenge, koennen wir das Problem umgehen,
+   * indem wir in clean() einfach eine "0" vorn anhaengen.
    */
   private final static int LC_LENGTH_HHD14 = 3;
   
@@ -104,11 +107,9 @@
   public DE de3           = new DE();
   
   /**
-   * Der Rest des Codes. In aller Regel sollte das ein Byte sein.
-   * Wobei das linke Halbbyte die Luhn-Pruefziffer ist und das rechte
-   * die XOR-Summe.
+   * Der Rest des Codes. Mit dem koennen wir nichts anfangen
    */
-  public String cb        = null;
+  public String rest      = null;
 
   /**
    * ct.
@@ -142,7 +143,7 @@
     code = this.de3.parse(code);
 
     // 4. Den Rest speichern wir hier.
-    this.cb = code.length() > 0 ? code : null;
+    this.rest = code.length() > 0 ? code : null;
   }
   
   /**
@@ -178,9 +179,7 @@
   }
 
   /**
-   * Rendert den flickerfaehigen Code aus dem Challenge im HHD 1.4-Format.
-   * Das HHD 1.3-Format wird nicht unterstuetzt. Der TAN-Generator muss also
-   * HHD 1.4-faehig sein.
+   * Rendert den flickerfaehigen Code aus dem Challenge im HHD-Format.
    * @return der neu generierte Flicker-Code.
    */
   public String render()
@@ -246,16 +245,12 @@
    */
   private String createXORChecksum(String payload)
   {
-    ////////////////////////////////////////////////////////////////////////////
-    // Schritt 1: Pruefziffer berechnen
     int xorsum = 0;
     for (int i=0; i<payload.length(); ++i)
     {
       xorsum ^= Integer.parseInt(Character.toString(payload.charAt(i)),16);
     }
     return toHex(xorsum,1);
-    //
-    ////////////////////////////////////////////////////////////////////////////
   }
 
   /**
@@ -325,7 +320,7 @@
     sb.append("DE1:\n" + this.de1 + "\n");
     sb.append("DE2:\n" + this.de2 + "\n");
     sb.append("DE3:\n" + this.de3 + "\n");
-    sb.append("CB : " + this.cb + "\n");
+    sb.append("CB : " + this.rest + "\n");
     return sb.toString();
   }
   
@@ -345,9 +340,9 @@
     if (!this.de2.equals(other.de2))             return false;
     if (!this.de3.equals(other.de3))             return false;
     
-    if (this.cb == null)
-      return (other.cb == null);
-    return this.cb.equals(other.cb);
+    if (this.rest == null)
+      return (other.rest == null);
+    return this.rest.equals(other.rest);
   }
 
   
@@ -466,10 +461,15 @@
         return this.encoding;
       
       // Siehe tan_hhd_uc_v14.pdf, letzter Absatz in B.2.3
-      if (this.data.contains(",") || this.data.contains("-"))
-        return Encoding.ASC;
+      // Bei SEPA-Auftraegen koennen auch Buchstaben in BIC/IBAN vorkommen.
+      // In dem Fall muss auch ASC-codiert werden. Also machen wir BCD nur
+      // noch dann, wenn ausschliesslich Zahlen drin stehen.
+      // Das macht subsembly auch so
+      // http://www.onlinebanking-forum.de/phpBB2/viewtopic.php?p=75602#75602
+      if (this.data.matches("[0-9]{1,}"))
+        return Encoding.BCD;
       
-      return Encoding.BCD;
+      return Encoding.ASC;
     }
     
     /**
@@ -723,8 +723,14 @@
 
 /**********************************************************************
  * $Log: 23-hbci4java-chiptan-opt2.patch,v $
  * Revision 1.1  2011/05/27 15:46:13  willuhn
  * @N 23-hbci4java-chiptan-opt2.patch - Kleinere Nacharbeiten
  *
- * Revision 1.5  2011-05-27 11:23:13  willuhn
- * @C Kommentar-Aenderungen wieder entfernt - noch nicht einchecken - sonst passt das naechste Patch ggf. nicht mehr
+ * Revision 1.4  2011-05-27 11:21:38  willuhn
+ * *** empty log message ***
+ *
+ * Revision 1.3  2011-05-27 11:20:36  willuhn
+ * *** empty log message ***
+ *
+ * Revision 1.2  2011-05-27 11:19:44  willuhn
+ * *** empty log message ***
  *
  * Revision 1.1  2011-05-27 10:28:38  willuhn
  * @N 22-hbci4java-chiptan-opt.patch
Index: src/org/kapott/hbci/manager/FlickerRenderer.java
===================================================================
RCS file: /cvsroot/hibiscus/hbci4java/src/org/kapott/hbci/manager/FlickerRenderer.java,v
retrieving revision 1.1
diff -u -r1.1 FlickerRenderer.java
--- src/org/kapott/hbci/manager/FlickerRenderer.java	27 May 2011 10:28:38 -0000	1.1
+++ src/org/kapott/hbci/manager/FlickerRenderer.java	27 May 2011 15:45:31 -0000
@@ -28,9 +28,21 @@
  */
 public class FlickerRenderer
 {
-  // Taktfrequenz. Soll laut tan_hhd_uc_v14.pdf, Kapitel C.1
-  // zwischen 2 und 20 Hz liegen.
-  private final static int HZ = 16;
+  /**
+   * Default-Taktfequenz in Hz.
+   * Soll laut tan_hhd_uc_v14.pdf, Kapitel C.1 zwischen 2 und 20 Hz liegen.
+   */
+  public final static int FREQUENCY_DEFAULT = 15;
+  
+  /**
+   * Minimale Taktfrequenz.
+   */
+  public final static int FREQUENCY_MIN     = 2;
+  
+  /**
+   * Maximale Taktfrequenz.
+   */
+  public final static int FREQUENCY_MAX = 20;
   
   private int halfbyteid       = 0;
   private int clock            = 0;
@@ -38,6 +50,7 @@
   
   private Thread thread = null;
   private int iterations = 0;
+  private int freq       = FREQUENCY_DEFAULT;
   
   /**
    * ct.
@@ -91,6 +104,20 @@
   }
   
   /**
+   * Legt die Taktfrequenz in Hz fest.
+   * Per Default werden 15Hz verwendet.
+   * @param hz die zu verwendende Taktfrequenz.
+   * Es werden nur Werte zwischen {@link FlickerRenderer#FREQUENCY_MIN} und
+   * {@link FlickerRenderer#FREQUENCY_MAX} akzeptiert.
+   */
+  public void setFrequency(int hz)
+  {
+    if (hz < FREQUENCY_MIN || hz > FREQUENCY_MAX)
+      return;
+    this.freq = hz;
+  }
+  
+  /**
    * Startet das Rendering des Flicker-Codes.
    * Die Funktion startet einen neuen Thread, kehrt also sofort zurueck.
    * 
@@ -129,8 +156,6 @@
     {
       public void run()
       {
-        long sleep = 1000L / HZ;
-        
         // Wir fangen beim ersten Halbbyte an.
         halfbyteid = 0;
         
@@ -169,6 +194,9 @@
             }
             
             // Warten
+            // Wir errechnen die Wartezeit in jedem Durchlauf.
+            // Dann kann die Frequenz auch waehrend des Blinkens geaendert werden.
+            long sleep = 1000L / freq;
             sleep(sleep);
           }
         }
Index: src/org/kapott/hbci/passport/HBCIPassportPinTan.java
===================================================================
RCS file: /cvsroot/hibiscus/hbci4java/src/org/kapott/hbci/passport/HBCIPassportPinTan.java,v
retrieving revision 1.3
diff -u -r1.3 HBCIPassportPinTan.java
--- src/org/kapott/hbci/passport/HBCIPassportPinTan.java	27 May 2011 10:28:38 -0000	1.3
+++ src/org/kapott/hbci/passport/HBCIPassportPinTan.java	27 May 2011 15:45:31 -0000
@@ -361,7 +361,7 @@
                     StringBuffer s = flicker != null ? new StringBuffer(flicker) : new StringBuffer();
                     HBCIUtilsInternal.getCallback().callback(this,
                         HBCICallback.NEED_PT_TAN,
-                        secmechInfo.getProperty("name")+" "+secmechInfo.getProperty("inputinfo")+": "+challenge,
+                        secmechInfo.getProperty("name")+"\n"+secmechInfo.getProperty("inputinfo")+"\n"+challenge,
                         HBCICallback.TYPE_TEXT,
                         s);
                     if (s.length()==0) {
Index: test/hbci4java/secmech/FlickerTest.java
===================================================================
RCS file: /cvsroot/hibiscus/hbci4java/test/hbci4java/secmech/FlickerTest.java,v
retrieving revision 1.2
diff -u -r1.2 FlickerTest.java
--- test/hbci4java/secmech/FlickerTest.java	27 May 2011 11:15:39 -0000	1.2
+++ test/hbci4java/secmech/FlickerTest.java	27 May 2011 15:45:31 -0000
@@ -192,7 +192,38 @@
     String rendered = code.render();
     Assert.assertEquals(rendered,"0F04871513130338972614312C30303B");
   }
-  
+
+  /**
+   * Enthaelt ein DE irgendwas ausser 0-9, muss es ASC-codiert werden.
+   * @throws Exception
+   */
+  @Test
+  public void test5() throws Exception
+  {
+    FlickerCode code = new FlickerCode("0248A01204520199808123F5678");
+      
+    FlickerCode expected = new FlickerCode();
+    expected.lc = 24;
+    expected.startCode.lde      = 138;
+    expected.startCode.length   = 10;
+    expected.startCode.data     = "2045201998";
+    expected.startCode.encoding = null;
+    expected.startCode.controlBytes.add(1);
+    expected.de1.lde      = 8;
+    expected.de1.length   = 8;
+    expected.de1.data     = "123F5678";
+    expected.de1.encoding = null;
+    expected.de2.data     = null;
+    expected.de3.data     = null;
+    
+    // Code muss dem erwarteten entsprechen
+    Assert.assertEquals(expected,code);
+    
+    // In Flicker-Format wandeln
+    String rendered = code.render();
+    Assert.assertEquals(rendered,"118501204520199848313233463536373875");
+  }
+
   /**
    * Testet das korrekte Rendern.
    * @throws Exception
