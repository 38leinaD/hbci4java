Index: src/org/kapott/hbci/datatypes/SyntaxDTAUS.java
===================================================================
RCS file: /cvsroot/hibiscus/hbci4java/src/org/kapott/hbci/datatypes/SyntaxDTAUS.java,v
retrieving revision 1.1
diff -u -r1.1 SyntaxDTAUS.java
--- src/org/kapott/hbci/datatypes/SyntaxDTAUS.java	4 May 2011 22:37:55 -0000	1.1
+++ src/org/kapott/hbci/datatypes/SyntaxDTAUS.java	6 Mar 2012 23:17:21 -0000
@@ -30,12 +30,27 @@
 {
     public static String check(String st)
     {
+        // [willuhn 2012-03-06, BUG 1129] siehe http://de.wikipedia.org/wiki/DIN_66003
+        // DIN-66003 (der DTAUS-Zeichensatz) ist eigentlich ASCII, jedoch sind ein paar
+        // unuebliche Sonderzeichen gegen deutsche Umlaute ersetzt worden.
+        // Da HBCI4Java den Datenstrom jedoch als Latin1 liest, werden die Umlaure
+        // faelschlicherweise als die Sonderzeichen aus der ASCII-Tabelle interpretiert.
+        // In Wirklichkeit sind es jedoch die deutschen Umlaute. Wir biegen das
+        // hier wieder gerade.
+        st=st.replace("[","Ä");  // 0x5B
+        st=st.replace("\\","Ö"); // 0x5C
+        st=st.replace("]","Ü");  // 0x5D
+        st=st.replace("{","ä");  // 0x7B
+        st=st.replace("|","ö");  // 0x7C
+        st=st.replace("}","ü");  // 0x7D
+        st=st.replace("~","ß");  // 0x7E
+      
         st=st.toUpperCase();
         st=st.replace('\344','\133').replace('\304','\133');
         st=st.replace('\366','\134').replace('\326','\134');
         st=st.replace('\374','\135').replace('\334','\135');
         st=st.replace('\337','\176');
-
+        
         int len=st.length();
         for (int i=0;i<len;i++) {
             char ch=st.charAt(i);
@@ -50,8 +65,12 @@
                 
                 String msg=HBCIUtilsInternal.getLocMsg("EXC_DTAUS_INV_CHAR",Character.toString(ch));
                 if (!HBCIUtilsInternal.ignoreError(null,"client.errors.ignoreWrongDataSyntaxErrors",msg)) {
-                    throw new InvalidArgumentException(msg);
+                    // [willuhn 2012-03-06, BUG 1129] Exception als fatal markieren
+                    InvalidArgumentException e = new InvalidArgumentException(msg);
+                    e.setFatal(true);
+                    throw e;
                 }
+                
                 st=st.replace(ch,' ');
             }
         }
Index: src/org/kapott/hbci/exceptions/HBCI_Exception.java
===================================================================
RCS file: /cvsroot/hibiscus/hbci4java/src/org/kapott/hbci/exceptions/HBCI_Exception.java,v
retrieving revision 1.1
diff -u -r1.1 HBCI_Exception.java
--- src/org/kapott/hbci/exceptions/HBCI_Exception.java	4 May 2011 22:38:01 -0000	1.1
+++ src/org/kapott/hbci/exceptions/HBCI_Exception.java	6 Mar 2012 23:17:21 -0000
@@ -47,8 +47,10 @@
 }
     </pre> */
 public class HBCI_Exception
-     extends RuntimeException
+    extends RuntimeException
 {
+    private boolean fatal = false;
+  
     protected static String applyLogFilter(String st) 
     {
         try {
@@ -95,4 +97,31 @@
     {
         super(applyLogFilter(st),e);
     }
+    
+    /**
+     * Markiert eine Exception als fatal.
+     * @param b true, wenn sie fatal ist.
+     */
+    public void setFatal(boolean b)
+    {
+      this.fatal = b;
+    }
+    
+    /**
+     * Liefert true, wenn die Exception oder ihr Cause als fatal eingestuft wurde.
+     * @return true, wenn die Exception oder ihr Cause als fatal eingestuft wurde.
+     */
+    public boolean isFatal()
+    {
+      if (this.fatal) // dann brauchen wir den Cause nicht mehr checken
+        return true;
+      
+      Throwable t = this.getCause();
+      if (t == this)
+        return false; // sind wir selbst
+      if (t instanceof HBCI_Exception)
+        return ((HBCI_Exception)t).isFatal();
+      
+      return false;
+    }
 }
Index: src/org/kapott/hbci/protocol/MultipleSyntaxElements.java
===================================================================
RCS file: /cvsroot/hibiscus/hbci4java/src/org/kapott/hbci/protocol/MultipleSyntaxElements.java,v
retrieving revision 1.1
diff -u -r1.1 MultipleSyntaxElements.java
--- src/org/kapott/hbci/protocol/MultipleSyntaxElements.java	4 May 2011 22:38:03 -0000	1.1
+++ src/org/kapott/hbci/protocol/MultipleSyntaxElements.java	6 Mar 2012 23:17:21 -0000
@@ -397,6 +397,11 @@
                     if (child!=null)
                         child.setParent(this);
                 } catch (ParseErrorException e) {
+                  
+                    // [willuhn 2012-03-06, BUG 1129] weiterwerfen, wenn sie als fatal eingestuft ist
+                    if (e.isFatal())
+                      throw e;
+                    
                     // wenn das nicht klappt, dann reststring zuruecksetzen, aber nur, 
                     //   wenn naechstes zeichen nicht wieder ein delimiter ist
                     //   dann war naemlich das zu generierende DE leer!!!
Index: test/hbci4java/msg/TestBug1129.java
===================================================================
RCS file: test/hbci4java/msg/TestBug1129.java
diff -N test/hbci4java/msg/TestBug1129.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ test/hbci4java/msg/TestBug1129.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,101 @@
+/**********************************************************************
+ * $Source: /cvsroot/hibiscus/hbci4java/log/patches/37-bug1129.patch,v $
+ * $Revision: 1.1 $
+ * $Date: 2012/03/06 23:18:26 $
+ * $Author: willuhn $
+ *
+ * Copyright (c) by willuhn - software & services
+ * All rights reserved
+ *
+ **********************************************************************/
+
+package hbci4java.msg;
+
+import hbci4java.AbstractTest;
+
+import java.util.Hashtable;
+
+import junit.framework.Assert;
+
+import org.junit.Test;
+import org.kapott.hbci.exceptions.ParseErrorException;
+import org.kapott.hbci.manager.HBCIKernelImpl;
+import org.kapott.hbci.manager.HBCIUtils;
+import org.kapott.hbci.manager.MsgGen;
+import org.kapott.hbci.protocol.MSG;
+import org.kapott.hbci.protocol.factory.MSGFactory;
+
+/**
+ * Tests fuer BUGZILLA 1129.
+ */
+public class TestBug1129 extends AbstractTest
+{
+  /**
+   * Versucht, die Datei mit dem Response zu parsen.
+   * @return die geparsten Daten.
+   * @throws Exception
+   */
+  private Hashtable parse() throws Exception
+  {
+    String data = getFile("msg/bugzilla-1129.txt");
+    HBCIKernelImpl kernel = new HBCIKernelImpl(null,"plus");
+    kernel.rawNewMsg("DauerList");
+    
+    MsgGen gen = kernel.getMsgGen();
+    MSG msg = MSGFactory.getInstance().createMSG("CustomMsgRes",data,data.length(),gen);
+
+    Hashtable<String,String> ht = new Hashtable<String,String>();
+    msg.extractValues(ht);
+    return ht;
+  }
+  
+  /**
+   * Testet das Parsen eines Responses mit ungueltigem DTAUS ohne Fehlertoleranz.
+   * Code muss einen Fehler werfen.
+   * @throws Exception
+   */
+  @Test
+  public void test001() throws Exception
+  {
+    try
+    {
+      parse();
+      throw new Exception("Test-Code haette eine Exception werfen muessen");
+    }
+    catch (Exception e)
+    {
+      Assert.assertEquals(ParseErrorException.class,e.getClass());
+      Assert.assertTrue(((ParseErrorException)e).isFatal());
+    }
+  }
+
+  /**
+   * Testet das Parsen eines Responses mit ungueltigem DTAUS MIT Fehlertoleranz.
+   * @throws Exception
+   */
+  @Test
+  public void test002() throws Exception
+  {
+    HBCIUtils.setParam("client.errors.ignoreWrongDataSyntaxErrors","yes");
+    parse();
+  }
+
+  /**
+   * Testet das Decodieren der DIN-66003 Umlaute.
+   * @throws Exception
+   */
+  @Test
+  public void test003() throws Exception
+  {
+    HBCIUtils.setParam("client.errors.ignoreWrongDataSyntaxErrors","yes");
+    Hashtable ht = parse();
+    Assert.assertEquals("EBÜHREN Z.T. IM VORAUS",ht.get("CustomMsgRes.GVRes_6.DauerListRes4.usage.usage_3"));
+  }
+
+}
+
+
+
+/**********************************************************************
+ * $Log: 37-bug1129.patch,v $
+ * Revision 1.1  2012/03/06 23:18:26  willuhn
+ * @N Patch 37 - BUGZILLA 1129
+ *
+ **********************************************************************/
\ No newline at end of file
Index: test/hbci4java/msg/bugzilla-1129.txt
===================================================================
RCS file: test/hbci4java/msg/bugzilla-1129.txt
diff -N test/hbci4java/msg/bugzilla-1129.txt
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ test/hbci4java/msg/bugzilla-1129.txt	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,14 @@
+HNHBK:1:3+000000001823+220+1234567890+2+1234567890:2'
+HIRMG:2:2+0010::Nachricht entgegengenommen.'
+HIRMS:3:2:3+0020::Sie haben 10 Dauerauftrag/Daueraufträge im Bestand.'
+HIDAB:4:4:3+123456789:EUR:280:12345678+1234567890::280:12345678+Möller, Ralf++1,:EUR+52+000+WIRTSCHAFTSGELDUND SONSTIGE:S::+20120402+1+20080901:M:1:1'
+HIDAB:5:4:3+123456789:EUR:280:12345678+1234567890::280:12345678+Möller, Ralf++2,:EUR+52+000+AUTO:::+20120402+3+20030601:M:1:1'
+HIDAB:6:4:3+123456789:EUR:280:12345678+1234567890::280:12345678+Möller, Ralf++3,:EUR+52+000+HAUSKONTO:::+20120402+4+20091101:M:1:1'
+HIDAB:7:4:3+123456789:EUR:280:12345678+1234567890::280:12345678+Möller, Ralf++4,:EUR+52+000+URLAUB:::+20120402+5+20020201:M:1:1'
+HIDAB:8:4:3+123456789:EUR:280:12345678+1234567890::280:12345678+Möller, Ralf++5,:EUR+52+000+KLEIDER:::+20120402+6+20030601:M:1:1'
+HIDAB:9:4:3+123456789:EUR:280:12345678+1234567890::280:12345678+Foobar AG++6,:EUR+52+000+artiges (17), easy-ms(17),:k62 (20) MX-backup Jahresg:eb}hren z.T. im Voraus:+20121101+10+20091101:M:12:1'
+HIDAB:10:4:3+123456789:EUR:280:12345678+1234567890::280:12345678+Möller, Verena++7,:EUR+52+000+Taschengeld f}r Verena:::+20120402+11+20120101:M:1:1'
+HIDAB:11:4:3+123456789:EUR:280:12345678+1234567890::280:12345678+Möller, Ralf++8,:EUR+52+000+Ausgleich Wohnungskonto:::+20120402+12+20120201:M:1:1'
+HIDAB:12:4:3+123456789:EUR:280:12345678+1234567890::280:12345678+Ralf Möller++9,:EUR+52+000+Essensgeld:::+20120402+14+20090201:M:1:1'
+HIDAB:13:4:3+123456789:EUR:280:12345678+1234567890::280:12345678+Sarah Möller++10,:EUR+52+000+Taschengeld Sarah:::+20120402+15+20120101:M:1:1'
+HNHBS:14:1+2'
