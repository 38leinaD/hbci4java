Index: src/org/kapott/hbci/GV/GVTAN2Step.java
===================================================================
RCS file: /cvsroot/hibiscus/hbci4java/src/org/kapott/hbci/GV/GVTAN2Step.java,v
retrieving revision 1.5
diff -u -r1.5 GVTAN2Step.java
--- src/org/kapott/hbci/GV/GVTAN2Step.java	18 May 2011 14:57:27 -0000	1.5
+++ src/org/kapott/hbci/GV/GVTAN2Step.java	27 May 2011 10:21:59 -0000
@@ -142,17 +142,11 @@
                 // TODO: hier noch die optionale DEG ChallengeValidity bereitstellen
             }
 
-            // willuhn 2011-05-09 extrahieren der Infos fuer die Generierung des Flickercodes
+            // willuhn 2011-05-27 Challenge HHDuc aus dem Reponse holen und im Passport zwischenspeichern
             String hhdUc = result.getProperty(header + ".challenge_hhd_uc");
             if (hhdUc != null)
             {
-              // TODO willuhn 2011-05-13 das HHD_UC ist nocht NICHT das Format, wie es
-              // von einem Flickercode-Widget angezeigt werden kann. Es muss noch umgewandelt
-              // werden. Das ist in
-              // Belegungsrichtlinien TANve1.4  mit Erratum 1-3 final version vom 2010-11-12.pdf
-              // Seite 45 beschrieben. Ich warte hier aber mal noch auf einen Beispiel-HHD_UC
-              // von einem User, mit dem ich testen kann, bevor ich das einbaue
-              HBCIUtils.log("found HHD UC '" + hhdUc + "' in HITAN - saving it temporarily in passport",HBCIUtils.LOG_DEBUG);
+              HBCIUtils.log("found Challenge HHDuc '" + hhdUc + "' in HITAN - saving it temporarily in passport",HBCIUtils.LOG_DEBUG);
               getMainPassport().setPersistentData("pintan_challenge_hhd_uc",hhdUc);
             }
             
Index: src/org/kapott/hbci/manager/FlickerCode.java
===================================================================
RCS file: src/org/kapott/hbci/manager/FlickerCode.java
diff -N src/org/kapott/hbci/manager/FlickerCode.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/kapott/hbci/manager/FlickerCode.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,726 @@
+/**********************************************************************
+ * $Source: /cvsroot/hibiscus/hbci4java/log/patches/22-hbci4java-chiptan-opt.patch,v $
+ * $Revision: 1.1 $
+ * $Date: 2011/05/27 10:28:38 $
+ * $Author: willuhn $
+ *
+ * Copyright (c) by willuhn - software & services
+ * All rights reserved
+ *
+ **********************************************************************/
+
+package org.kapott.hbci.manager;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Implementierung des Flicker-Codes fuer optisches ChipTAN.
+ * Basiert auf der Javascript-Implementierung von
+ * http://6xq.net/media/00/20/flickercode.html
+ * 
+ * Die Javascript-Implementierung war jedoch nicht mehr aktuell (basiert auf HHD 1.3).
+ */
+public class FlickerCode
+{
+  /**
+   * Versionskennung.
+   */
+  public static enum HHDVersion
+  {
+    /**
+     * HHD-Version 1.4
+     */
+    HHD14,
+    
+    /**
+     * HHD-Version 1.3
+     */
+    HHD13
+  }
+  
+  /**
+   * Das Encoding der Nutzdaten.
+   */
+  public static enum Encoding
+  {
+    /**
+     * ASC-Encoding.
+     */
+    ASC,
+    
+    /**
+     * BCD-Encoding.
+     */
+    BCD,
+  }
+  
+
+  /**
+   * Die Anzahl der Bytes, in der die Laenge des Challenge steht.
+   * Bei HHD 1.3 war das noch 2 Zeichen lang.
+   * Ich habe keine Ahnung, woran ich erkennen kann, wenn der nur 2 Stellen lang ist.
+   */
+  private final static int LC_LENGTH_HHD14 = 3;
+  
+  /**
+   * Die Position des Bits, welches das Encoding enthaelt.
+   */
+  private final static int BIT_ENCODING = 6;
+  
+  /**
+   * Die Position des Bits, welches festlegt, ob ein Controlbyte folgt.
+   */
+  private final static int BIT_CONTROLBYTE = 7;
+  
+  /**
+   * Die HHD-Version.
+   */
+  public HHDVersion version = null;
+  
+  /**
+   * Laenge des gesamten Codes.
+   */
+  public int lc           = 0;
+  
+  /**
+   * Der Startcode.
+   */
+  public Startcode startCode = new Startcode();
+
+  /**
+   * Datenelement 1.
+   */
+  public DE de1           = new DE();
+  
+  /**
+   * Datenelement 2.
+   */
+  public DE de2           = new DE();
+
+  /**
+   * Datenelement 3.
+   */
+  public DE de3           = new DE();
+  
+  /**
+   * Der Rest des Codes. In aller Regel sollte das ein Byte sein.
+   * Wobei das linke Halbbyte die Luhn-Pruefziffer ist und das rechte
+   * die XOR-Summe.
+   */
+  public String cb        = null;
+
+  /**
+   * ct.
+   * Parameterloser Konstruktor zum manuellen Zusammenstecken eines Codes.
+   */
+  public FlickerCode()
+  {
+  }
+  
+  /**
+   * ct.
+   * Parst den HHDuc-Code aus dem uebergebenen Code.
+   * @param code der zu parsende Code.
+   */
+  public FlickerCode(String code)
+  {
+    code = clean(code);
+    
+    // 1. LC ermitteln. Banales ASCII
+    {
+      this.lc = Integer.parseInt(code.substring(0,LC_LENGTH_HHD14));
+      code = code.substring(LC_LENGTH_HHD14); // und abschneiden
+    }
+
+    // 2. Startcode/Control-Bytes
+    code = this.startCode.parse(code);
+    
+    // 3. LDE/DE 1-3
+    code = this.de1.parse(code);
+    code = this.de2.parse(code);
+    code = this.de3.parse(code);
+
+    // 4. Den Rest speichern wir hier.
+    this.cb = code.length() > 0 ? code : null;
+  }
+  
+  /**
+   * Entfernt das CHLGUC0026....CHLGTEXT aus dem Code, falls vorhanden.
+   * Das sind HHD 1.3-Codes, die nicht im "Challenge HHDuc" uebertragen
+   * wurden sondern direkt im Challenge-Freitext,
+   * @param code
+   * @return
+   */
+  private String clean(String code)
+  {
+    code = code.replaceAll(" ",""); // Alle Leerzeichen entfernen
+    code = code.trim();             // Whitespaces entfernen
+    
+    // Jetzt checken, ob die beiden Tokens enthalten sind
+    int t1Start = code.indexOf("CHLGUC");
+    int t2Start = code.indexOf("CHLGTEXT");
+    if (t1Start == -1 || t2Start == -1 || t2Start <= t1Start)
+      return code; // Ne, nicht enthalten
+    
+    // Erstmal den 2. Token abschneiden
+    code = code.substring(0,t2Start);
+    
+    // Dann alles abschneiden bis zum Beginn von "CHLGUC"
+    code = code.substring(t1Start);
+
+    // Wir haben eigentlich nicht nur "CHLGUC" sondern "CHLGUC0026"
+    // Wobei die 4 Zahlen sicher variieren koennen. Wir schneiden einfach alles ab.
+    code = code.substring(10);
+    
+    // Jetzt vorn noch ne "0" dran haengen, damit LC wieder 3-stellig ist - wie bei HHD 1.4
+    return "0" + code;
+  }
+
+  /**
+   * Rendert den flickerfaehigen Code aus dem Challenge im HHD 1.4-Format.
+   * Das HHD 1.3-Format wird nicht unterstuetzt. Der TAN-Generator muss also
+   * HHD 1.4-faehig sein.
+   * @return der neu generierte Flicker-Code.
+   */
+  public String render()
+  {
+    // 1. Payload ermitteln
+    String s = createPayload();
+
+    // 2. Luhn-Checksumme neu berechnen
+    String luhn = createLuhnChecksum();
+    
+    // 3. XOR-Checksumme neu berechnen
+    String xor = createXORChecksum(s);
+    
+    // 4. Alles zusammenbauen und zurueckliefern
+    return s + luhn + xor;
+  }
+  
+  /**
+   * Generiert den Payload neu.
+   * Das ist der komplette Code, jedoch ohne Pruefziffern am Ende.
+   * @return der neu generierte Payload.
+   */
+  private String createPayload()
+  {
+    StringBuffer sb  = new StringBuffer();
+    
+    // 1. Laenge Startcode
+    sb.append(this.startCode.renderLength());
+    
+    // 2. Die Control-Bytes
+    for (Integer i:this.startCode.controlBytes)
+    {
+      sb.append(toHex(i,2));
+    }
+
+    // 3. Der Startcode
+    sb.append(this.startCode.renderData());
+
+    // 4. DEs anhaengen.
+    DE[] deList = new DE[]{this.de1,this.de2,this.de3};
+    for (int i=0;i<deList.length;++i)
+    {
+      DE de = deList[i];
+      sb.append(de.renderLength());
+      sb.append(de.renderData());
+    }
+    
+    String s = sb.toString();
+    
+    // 5. Laenge neu berechnen und vorn dran haengen
+    int len = s.length();
+    len += 2; // die zwei Zeichen am Ende mit den Pruefsummen muessen wir noch mit reinrechnen. 
+    len = len / 2; // Anzahl der Bytes. Jedes Byte sind 2 Zeichen.
+    String lc = toHex(len,2);
+    
+    return (lc + s);
+  }
+  
+  /**
+   * Berechnet die XOR-Checksumme fuer den Code neu.
+   * @param der Payload.
+   * @return die XOR-Checksumme im Hex-Format.
+   */
+  private String createXORChecksum(String payload)
+  {
+    ////////////////////////////////////////////////////////////////////////////
+    // Schritt 1: Pruefziffer berechnen
+    int xorsum = 0;
+    for (int i=0; i<payload.length(); ++i)
+    {
+      xorsum ^= Integer.parseInt(Character.toString(payload.charAt(i)),16);
+    }
+    return toHex(xorsum,1);
+    //
+    ////////////////////////////////////////////////////////////////////////////
+  }
+
+  /**
+   * Berechnet die Luhn-Pruefziffer neu.
+   * @return die Pruefziffer im Hex-Format.
+   */
+  private String createLuhnChecksum()
+  {
+    ////////////////////////////////////////////////////////////////////////////
+    // Schritt 1: Payload ermitteln
+    StringBuffer sb = new StringBuffer();
+    
+    // a) Controlbytes
+    for (Integer i:this.startCode.controlBytes)
+      sb.append(toHex(i,2));
+    
+    // b) Startcode
+    sb.append(this.startCode.renderData());
+    
+    // c) DEs
+    if (this.de1.data != null) sb.append(this.de1.renderData());
+    if (this.de2.data != null) sb.append(this.de2.renderData());
+    if (this.de3.data != null) sb.append(this.de3.renderData());
+    
+    String payload = sb.toString();
+    
+    //
+    ////////////////////////////////////////////////////////////////////////////
+
+    ////////////////////////////////////////////////////////////////////////////
+    // Schritt 2: Pruefziffer berechnen
+    int luhnsum = 0;
+    int i = 0;
+    for (i=0; i<payload.length(); i+=2)
+    {
+      luhnsum += (1*Integer.parseInt(Character.toString(payload.charAt(i)),16)) + 
+                 quersumme(2*Integer.parseInt(Character.toString(payload.charAt(i+1)),16));
+    }
+    
+    // Ermittelt, wieviel zu "luhnsum" addiert werden muss, um auf die
+    // naechste Zahl zu kommen, die durch 10 teilbar ist
+    // Beispiel:
+    // luhnsum = 129 modulo 10 -> 9
+    // 10 - 9 = 1
+    // also 129 + 1 = 130
+    int rest = 10 - (luhnsum % 10);
+    int sum = luhnsum + rest;
+    
+    // Von dieser Summe ziehen wir die berechnete Summe ab
+    // Beispiel:
+    // 130 - 129 = 1
+    // 1 -> ist die Luhn-Checksumme.
+    int luhn = sum - luhnsum;
+    return toHex(luhn,1);
+    //
+    ////////////////////////////////////////////////////////////////////////////
+  }
+
+  /**
+   * @see java.lang.Object#toString()
+   */
+  public String toString()
+  {
+    StringBuffer sb = new StringBuffer();
+    sb.append("LC: " + this.lc + "\n");
+    sb.append("Startcode:\n" + this.startCode + "\n");
+    sb.append("DE1:\n" + this.de1 + "\n");
+    sb.append("DE2:\n" + this.de2 + "\n");
+    sb.append("DE3:\n" + this.de3 + "\n");
+    sb.append("CB : " + this.cb + "\n");
+    return sb.toString();
+  }
+  
+
+  /**
+   * @see java.lang.Object#equals(java.lang.Object)
+   */
+  public boolean equals(Object obj)
+  {
+    if (!(obj instanceof FlickerCode))
+      return false;
+    FlickerCode other = (FlickerCode) obj;
+    
+    if (this.lc != other.lc)                     return false;
+    if (!this.startCode.equals(other.startCode)) return false;
+    if (!this.de1.equals(other.de1))             return false;
+    if (!this.de2.equals(other.de2))             return false;
+    if (!this.de3.equals(other.de3))             return false;
+    
+    if (this.cb == null)
+      return (other.cb == null);
+    return this.cb.equals(other.cb);
+  }
+
+  
+  
+  /**
+   * Bean fuer die Eigenschaften eines einzelnen DE.
+   */
+  public class DE
+  {
+    /**
+     * Die tatsaechliche Laenge des DE.
+     * Bereinigt um ggf. vorhandene Control-Bits.
+     */
+    public int length = 0;
+    
+    /**
+     * Die Laengen-Angabe des DE im Roh-Format.
+     * Sie kann noch Control-Bits enthalten, sollte daher
+     * also NICHT fuer Laengenberechnungen verwendet werden.
+     * In dem Fall stattdessen <code>length</code> verwenden.
+     */
+    public int lde    = 0;
+    
+    /**
+     * Das Encoding der Nutzdaten.
+     * Per Definition ist im Challenge HHDuc dieses Bit noch NICHT gesetzt.
+     * Das Encoding passiert erst beim Rendering.
+     */
+    public Encoding encoding = null;
+    
+    /**
+     * Die eigentlichen Nutzdaten des DE.
+     */
+    public String data  = null;
+   
+    /**
+     * Parst das DE am Beginn des uebergebenen Strings.
+     * @param s der String, dessen Anfang das DE enthaelt.
+     * @return der Reststring.
+     */
+    String parse(String s)
+    {
+      // Nichts mehr zum Parsen da
+      if (s == null || s.length() == 0)
+        return s;
+
+      // LDE ermitteln (dezimal)
+      this.lde = Integer.parseInt(s.substring(0,2));
+      s = s.substring(2); // und abschneiden
+
+      // Control-Bits abschneiden. Die Laengen-Angabe steht nur in den Bits 0-5.
+      // In den Bits 6 und 7 stehen Steuer-Informationen
+      this.length  = getBitSum(this.lde,5); // Bit 0-5
+      
+      // Encoding gibts hier noch nicht. Das passiert erst beim Rendern
+      
+      // Nutzdaten ermitteln
+      this.data = s.substring(0,this.length);
+      s = s.substring(this.length); // und abschneiden
+    
+      return s;
+    }
+
+    /**
+     * Rendert die Laengenangabe fuer die Uebertragung via Flickercode.
+     * @return die codierten Nutzdaten.
+     * Wenn das DE keine Nutzdaten enthaelt, wird "" zurueck gegeben.
+     */
+    String renderLength()
+    {
+      // Keine Daten enthalten. Dann muessen wir auch nichts weiter
+      // beruecksichtigen.
+      // Laut Belegungsrichtlinien TANve1.4  mit Erratum 1-3 final version vom 2010-11-12.pdf
+      // duerfen im "ChallengeHHDuc" eigentlich keine leeren DEs enthalten
+      // sein. Daher geben wir in dem Fall "" zurueck und nicht "00" wie in
+      // tan_hhd_uc_v14.pdf angegeben. Denn mit "00" wollte es mein TAN-Generator nicht
+      // lesen. Kann aber auch sein, dass der einfach nicht HHD 1.4 tauglich ist
+      if (this.data == null)
+        return "";
+
+      Encoding enc = this.getEncoding();
+
+      // Die wollen die Anzahl der Bytes, nicht die Laenge der Zeichen
+      int len = renderData().length() / 2;
+      
+      // A) BCD -> Muss nichts weiter codiert werden.
+      if (enc == Encoding.BCD)
+        return toHex(len,2);
+
+      // B) ASC -> Encoding-Bit reincodieren
+      // HHD 1.4 -> in das Bit-Feld codieren
+      if (FlickerCode.this.version == HHDVersion.HHD14)
+      {
+        len = len + (1 << BIT_ENCODING);
+        return toHex(len,2);
+      }
+
+      // HHD 1.3 -> nur ne 1 im linken Halbbyte schicken
+      return "1" + toHex(len,1);
+    }
+    
+    /**
+     * Liefert das zu verwendende Encoding fuer die Uebertragung via Flickercode.
+     * Im Normalfall (also nach dem Parsen eines HHDuc) ist kein Encoding angegeben
+     * (im Challenge HHDuc ist das per Definition nie gesetzt) machen wir ASC.
+     * Es sei denn, das Encoding wurde explizit auf BCD gesetzt.
+     * @return das fuer das Rendering zu verwendende Encoding.
+     */
+    Encoding getEncoding()
+    {
+      if (this.data == null)
+        return Encoding.BCD;
+      
+      // Explizit angegeben
+      if (this.encoding != null)
+        return this.encoding;
+      
+      // Siehe tan_hhd_uc_v14.pdf, letzter Absatz in B.2.3
+      if (this.data.contains(",") || this.data.contains("-"))
+        return Encoding.ASC;
+      
+      return Encoding.BCD;
+    }
+    
+    /**
+     * Rendert die Nutzdaten fuer die Uebertragung via Flickercode.
+     * @return die codierten Nutzdaten.
+     * Wenn das DE keine Nutzdaten enthaelt, wird "" zurueck gegeben.
+     */
+    String renderData()
+    {
+      if (this.data == null)
+        return "";
+
+      Encoding enc = this.getEncoding();
+      if (enc == Encoding.ASC)
+        return toHex(this.data);
+
+      // Bei BCD-Encoding noch mit "F" auf Byte-Grenze ergenzen
+      String s = this.data;
+      if (s.length() % 2 == 1)
+        s += "F";
+      
+      return s;
+    }
+    
+    /**
+     * @see java.lang.Object#toString()
+     */
+    public String toString()
+    {
+      StringBuffer sb = new StringBuffer();
+      sb.append("  Length  : " + this.length + "\n");
+      sb.append("  LDE     : " + this.lde + "\n");
+      sb.append("  Data    : " + this.data + "\n");
+      sb.append("  Encoding: " + this.encoding + "\n");
+      return sb.toString();
+    }
+    
+    /**
+     * @see java.lang.Object#equals(java.lang.Object)
+     */
+    public boolean equals(Object obj)
+    {
+      if (!(obj instanceof DE))
+        return false;
+      return this.toString().equals(obj.toString());
+    }
+  }
+  
+  
+  /**
+   * Bean fuer die Eigenschaften des Startcodes.
+   * Selbstverstaendlich sind hier so einige Sachen anders codiert als im DE.
+   * Waer ja auch zu einfach sonst.
+   * Die Laengen-Angabe ist anders codiert (hex statt dec). Und nach der
+   * Laenge kommen nicht sofort die Nutzdaten sondern erst noch die Control-Bytes.
+   */
+  public class Startcode extends DE
+  {
+    /**
+     * Die Control-Bytes.
+     * In der Regel sollte das nur eines sein.
+     */
+    public List<Integer> controlBytes = new ArrayList<Integer>();
+    
+    /**
+     * Parst das DE am Beginn des uebergebenen Strings.
+     * @param s der String, dessen Anfang das DE enthaelt.
+     * @return der Reststring.
+     */
+    String parse(String s)
+    {
+      // 1. LDE ermitteln (hex)
+      this.lde = Integer.parseInt(s.substring(0,2),16);
+      s = s.substring(2); // und abschneiden
+      
+      // 2. tatsaechliche Laenge ermitteln
+      this.length = getBitSum(this.lde,5); // Bit 0-5
+      
+      // Encoding gibts hier noch nicht.
+      // Das passiert erst beim Rendern
+
+      // Wenn kein Control-Byte vorhanden ist, muss es HHD 1.3 sein
+      FlickerCode.this.version = HHDVersion.HHD13;
+
+      // 3. Control-Byte ermitteln, falls vorhanden
+      if (isBitSet(this.lde,BIT_CONTROLBYTE))
+      {
+        FlickerCode.this.version = HHDVersion.HHD14;
+        
+        // Es darf maximal 9 Controlbytes geben
+        for (int i=0;i<10;++i)
+        {
+          // 2 Zeichen, Hex
+          int controlByte = Integer.parseInt(s.substring(0,2),16);
+          this.controlBytes.add(controlByte);
+          s = s.substring(2); // und abschneiden
+          
+          // Solange beim Controlbyte das groesste Bit gesetzt ist,
+          // folgen weitere
+          if (!isBitSet(controlByte,BIT_CONTROLBYTE))
+            break;
+        }
+      }
+      
+      // 4. Startcode ermitteln
+      this.data = s.substring(0,this.length);
+      s = s.substring(this.length); // und abschneiden
+      
+      return s;
+    }
+    
+    
+    /**
+     * @see org.kapott.hbci.manager.FlickerCode.DE#renderLength()
+     * Ueberschrieben, weil wir hier noch reincodieren muessen, ob ein Controlbyte folgt.
+     */
+    String renderLength()
+    {
+      String s = super.renderLength();
+      
+      // HHD 1.3 -> gibt keine Controlbytes
+      if (FlickerCode.this.version == HHDVersion.HHD13)
+        return s;
+
+      // HHD 1.4 -> aber keine Controlbytes vorhanden
+      if (this.controlBytes.size() == 0)
+        return s;
+
+      // Controlbytes reincodieren
+      int len = Integer.parseInt(s,16);
+
+      if (this.controlBytes.size() > 0)
+        len += (1 << BIT_CONTROLBYTE);
+
+      return toHex(len,2);
+    }
+
+
+    /**
+     * @see org.kapott.hbci.manager.FlickerCode.DE#toString()
+     */
+    public String toString()
+    {
+      StringBuffer sb = new StringBuffer(super.toString());
+      sb.append("  Controlbytes: " + this.controlBytes + "\n");
+      return sb.toString();
+    }
+
+    /**
+     * @see org.kapott.hbci.manager.FlickerCode.DE#equals(java.lang.Object)
+     */
+    public boolean equals(Object obj)
+    {
+      if (!(obj instanceof Startcode))
+        return false;
+       return this.toString().equals(obj.toString());
+    }
+  }
+
+
+
+  //////////////////////////////////////////////////////////////////////////////
+  // Hilfsfunktionen fuer die Berechnungen
+
+  /**
+   * Wandelt die Zahl in Hex-Schreibweise um und fuellt links mit Nullen auf, bis die Laenge "len" erreicht ist.
+   * @param n die Zahl.
+   * @param len die zu erreichende Laenge.
+   * @return die links mit Nullen aufgefuellte Zahl in HEX-Schreibweise.
+   */
+  private static String toHex(int n,int len)
+  {
+    String s = Integer.toString(n,16).toUpperCase();
+    while (s.length() < len)
+      s = "0" + s;
+    return s;
+  }
+  
+  /**
+   * Wandelt alle Zeichen des String gemaess des jeweiligen ASCII-Wertes in HEX-Codierung um.
+   * Beispiel: Das Zeichen "0" hat den ASCII-Wert "30" in Hexadezimal-Schreibweise.
+   * @param s der umzuwandelnde String.
+   * @return der codierte String.
+   */
+  private static String toHex(String s)
+  {
+    StringBuffer sb = new StringBuffer();
+    char[] chars = s.toCharArray();
+    for (char c:chars)
+    {
+      sb.append(toHex(c,2));
+    }
+    return sb.toString();
+  }
+
+  /**
+   * Berechnet die Quersumme.
+   * @param n die Zahl, deren Quersumme errechnet werden soll.
+   * @return die Quersumme.
+   */
+  private static int quersumme(int n)
+  {
+    int q = 0;
+    while (n != 0)
+    {
+      q += n % 10;
+      n = (int) Math.floor(n / 10);
+    }
+    return q;
+  }
+  
+  /**
+   * Liefert die Summe der Bit-Wertigkeiten fuer die genannten Bits
+   * (beginndend bei 0 und beim kleinsten Bit, angegebens inclusive).
+   * 
+   * Beispiel:
+   * num  = 156 (-> 10011100)
+   * bits = 5
+   * 
+   * Es wird die Summe der Bitwertigkeiten 2^0 bis 2^5 errechnet.
+   * Also der Wert von **011100 = 2^4+2^3+s^2 = 28
+   * 
+   * @param num Zahl, aus der die Summe berechnet werden soll.
+   * @param bits Anzahl der Bits (beginnend bei 0 und beim kleinsten Bit, angegebenes inclusive), deren Wertigkeit addiert werden soll.
+   * @return der errechnete Wert.
+   */
+  private static int getBitSum(int num,int bits)
+  {
+    int sum = 0;
+    for (int i=0;i<=bits;++i)
+      sum += (num & (1 << i));
+    return sum;
+  }
+  
+  
+  /**
+   * Prueft, ob in der genannten Zahl das angegebene Bit gesetzt ist.
+   * @param num die zu pruefende Zahl.
+   * @param bit die Nummer des zu pruefenden Bits.
+   * Wobei "0" das kleinste (rechts) und "7" das groesste (links) Bit ist.
+   * @return true, wenn das Bit gesetzt ist.
+   */
+  private static boolean isBitSet(int num,int bit)
+  {
+    return (num & (1 << bit)) != 0;
+  }
+  //////////////////////////////////////////////////////////////////////////////
+}
+
+
+
+/**********************************************************************
+ * $Log: 22-hbci4java-chiptan-opt.patch,v $
+ * Revision 1.1  2011/05/27 10:28:38  willuhn
+ * @N 22-hbci4java-chiptan-opt.patch
+ *
+ **********************************************************************/
\ No newline at end of file
Index: src/org/kapott/hbci/manager/FlickerRenderer.java
===================================================================
RCS file: src/org/kapott/hbci/manager/FlickerRenderer.java
diff -N src/org/kapott/hbci/manager/FlickerRenderer.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/kapott/hbci/manager/FlickerRenderer.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,284 @@
+/**********************************************************************
+ * $Source: /cvsroot/hibiscus/hbci4java/log/patches/22-hbci4java-chiptan-opt.patch,v $
+ * $Revision: 1.1 $
+ * $Date: 2011/05/27 10:28:38 $
+ * $Author: willuhn $
+ *
+ * Copyright (c) by willuhn - software & services
+ * All rights reserved
+ *
+ **********************************************************************/
+
+package org.kapott.hbci.manager;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Uebernimmt das Umwandeln eines Flicker-Codes in die blinkende Darstellung.
+ * Da wir hier in HBCI4Java ja keinen GUI-spezifischen Code (Swing, SWT, etc.)
+ * haben, uebernimmt die Klasse lediglich das Erzeugen der schwarzen und weissen
+ * Balken sowie das Timing. Sie ruft dann im Wiedergabe-Takt die Funktion paint()
+ * auf, die ueberschrieben werden muss, um dort dann das eigentliche Zeichnen
+ * der 5 Balken durchzufuehren.
+ * Die paint-Funktion wird so ca. 15-20 mal pro Sekunde aufgerufen, sollte die
+ * Ausgabe auf dem Bildschirm daher flott machen ;)
+ */
+public class FlickerRenderer
+{
+  // Taktfrequenz. Soll laut tan_hhd_uc_v14.pdf, Kapitel C.1
+  // zwischen 2 und 20 Hz liegen.
+  private final static int HZ = 16;
+  
+  private int halfbyteid       = 0;
+  private int clock            = 0;
+  private List<int[]> bitarray = null;
+  
+  private Thread thread = null;
+  private int iterations = 0;
+  
+  /**
+   * ct.
+   * @param code der zu rendernde Flicker-Code.
+   * Er wird von HBCI4Java ueber den Callback NEED_PT_TA uebergeben.
+   * 
+   * Etwa so:
+   * 
+   * case HBCICallback.NEED_PT_TAN:
+   *   String flicker = retData.toString();
+   *   if (flicker != null && flicker.length() > 0)
+   *   {
+   *     MyFlickerRenderer = new FlickerRenderer(flicker) {
+   *       // hier paint() ueberschreiben
+   *     };
+   *   }
+   */
+  public FlickerRenderer(String code)
+  {
+    // Sync-Identifier vorn dran haengen.
+    code = "0FFF" + code;
+
+    // Das Bitfeld mit der BCD-Codierung.
+    // Koennte man auch in einer For-Schleife und etwas Bit-Schieberei machen.
+    // Aber das ist ist besser lesbar ;)
+    Map<String,int[]> bcdmap = new HashMap<String,int[]>();
+    bcdmap.put("0",new int[]{0, 0, 0, 0, 0});
+    bcdmap.put("1",new int[]{0, 1, 0, 0, 0});
+    bcdmap.put("2",new int[]{0, 0, 1, 0, 0});
+    bcdmap.put("3",new int[]{0, 1, 1, 0, 0});
+    bcdmap.put("4",new int[]{0, 0, 0, 1, 0});
+    bcdmap.put("5",new int[]{0, 1, 0, 1, 0});
+    bcdmap.put("6",new int[]{0, 0, 1, 1, 0});
+    bcdmap.put("7",new int[]{0, 1, 1, 1, 0});
+    bcdmap.put("8",new int[]{0, 0, 0, 0, 1});
+    bcdmap.put("9",new int[]{0, 1, 0, 0, 1});
+    bcdmap.put("A",new int[]{0, 0, 1, 0, 1});
+    bcdmap.put("B",new int[]{0, 1, 1, 0, 1});
+    bcdmap.put("C",new int[]{0, 0, 0, 1, 1});
+    bcdmap.put("D",new int[]{0, 1, 0, 1, 1});
+    bcdmap.put("E",new int[]{0, 0, 1, 1, 1});
+    bcdmap.put("F",new int[]{0, 1, 1, 1, 1});
+
+    // Wir mappen den Code basierend auf dem Bit-Array.
+    // Linkes und rechtes Zeichen jedes Bytes wird getauscht.
+    this.bitarray = new ArrayList<int[]>();
+    for (int i = 0; i < code.length(); i += 2) {
+      bitarray.add(bcdmap.get(Character.toString(code.charAt(i+1))));
+      bitarray.add(bcdmap.get(Character.toString(code.charAt(i))));
+    }
+  }
+  
+  /**
+   * Startet das Rendering des Flicker-Codes.
+   * Die Funktion startet einen neuen Thread, kehrt also sofort zurueck.
+   * 
+   * Da diese Funktion einen neuen Thread startet und somit sofort
+   * zurueckkehrt, kann es ggf. noetig sein, eine Warteschleife zu
+   * implementieren. Hierzu kann einfach die Funktion "waitFor()" aufgerufen
+   * werden. Sie pausiert solange, bis "stop()" augerufen wurde.
+   * 
+   * Beispiel:
+   * 
+   * FlickerRenderer renderer = new FlickerRenderer(meinCode) {
+   *   public void paint(boolean b1,boolean b2,boolean b3,boolean b4,boolean b5)
+   *   {
+   *     // hier eigenen Code zum Rendern einbauen
+   *   }
+   *   
+   *   public void done(int iterations)
+   *   {
+   *     // Nach 20 Uebertragungen hoeren wir auf.
+   *     if (iterations > 20)
+   *       stop();
+   *   }
+   * };
+   * 
+   * renderer.start();
+   * renderer.waitFor();
+   * System.out.println("Code uebertragen");
+   * 
+   */
+  public final synchronized void start()
+  {
+    // ggf. laufenden Thread beenden
+    stop();
+    
+    this.thread = new Thread("Flicker Update-Thread")
+    {
+      public void run()
+      {
+        long sleep = 1000L / HZ;
+        
+        // Wir fangen beim ersten Halbbyte an.
+        halfbyteid = 0;
+        
+        // Die Clock, die immer hin und her kippt. Wir beginnen bei 1.
+        // Sonst wuerde das allererste Zeichen nur einmal uebertragen
+        // werden, was bewirkt, dass der Code erst einmal komplett
+        // durchlaufen muesste, bevor wir einen kompletten gesendet haetten
+        clock      = 1;
+
+        try
+        {
+          // Die Endlos-Schleife mit der Uebertragung
+          while (true)
+          {
+            int[] bits = bitarray.get(halfbyteid);
+            
+            bits[0] = clock;
+            paint(bits[0] == 1,bits[1] == 1,bits[2] == 1,bits[3] == 1,bits[4] == 1);
+            
+            clock--;
+            if (clock < 0)
+            {
+              clock = 1;
+              
+              // Jedes Zeichen muss doppelt uebertragen werden. Einmal mit clock 0
+              // und einmal mit clock 1.
+              halfbyteid++;
+              if (halfbyteid >= bitarray.size())
+              {
+                halfbyteid = 0;
+
+                // Wir sind einmal mit dem Code komplett durch
+                iterations++;
+                done(iterations);
+              }
+            }
+            
+            // Warten
+            sleep(sleep);
+          }
+        }
+        catch (InterruptedException e)
+        {
+          // Ende der Anzeige
+        }
+      }
+    };
+    thread.start();
+  }
+  
+  /**
+   * Stoppt das Rendern.
+   */
+  public final void stop()
+  {
+    if (this.thread != null)
+    {
+      try
+      {
+        if (this.thread != null)
+        {
+          this.thread.interrupt();
+          synchronized (this.thread)
+          {
+            this.thread.notifyAll();
+          }
+        }
+      }
+      finally
+      {
+        this.thread = null;
+      }
+    }
+  }
+  
+  /**
+   * Wird immer dann aufgerufen, wenn die 5 Balken der Flicker-Grafik aktualisiert
+   * werden sollen. Die 5 Boolean-Parameter legen die aktuell anzuzeigende Codierung
+   * fest.
+   * 
+   * Die Default-Implementierung ist leer.
+   * 
+   * Diese Funktion muss auf jeden Fall ueberschrieben werden. Sonst kriegt man
+   * keinen Flicker-Code.
+   * 
+   * @param b1 Balken 1. true=weiss, false=schwarz
+   * @param b2 Balken 2. true=weiss, false=schwarz
+   * @param b3 Balken 3. true=weiss, false=schwarz
+   * @param b4 Balken 4. true=weiss, false=schwarz
+   * @param b5 Balken 5. true=weiss, false=schwarz
+   */
+  public void paint(boolean b1,boolean b2,boolean b3,boolean b4,boolean b5)
+  {
+  }
+  
+  /**
+   * Wird immer dann aufgerufen, nachdem der Flicker-Code einmal komplett
+   * an den TAN-Generator uebertragen wurde.
+   * Die Funktion wird zum ersten Mal NACH der ersten Uebertragung aufgerufen
+   * und anschliessend nach jeder weiteren.
+   * 
+   * Die Default-Implementierung ist leer.
+   * 
+   * Fuer gewoehnlich wird die Funktion zur Darstellung nicht benoetigt.
+   * Sie kann aber zu Debugging-Zwecken verwendet werden oder zum automatischen
+   * Abbruch nach einer definierten Anzahl von Uebertragungen.
+   * Sie muss also nicht ueberschrieben werden.
+   * 
+   * Die Funktion wird direkt im Flicker-Thread aufgerufen. Sie sollte daher
+   * auf keinen Fall irgendwas aufwaendiges machen, da das zum Ausbremsen
+   * der Flicker-Uebertragung fuehren wuerde.
+   * 
+   * @param iterations Anzahl der bisherigen Uebertragungen (beginnend bei 1 -
+   * da die Funktion ja erst nach der ersten Uebertragung aufgerufen wird)
+   */
+  public void done(int iterations)
+  {
+  }
+  
+  /**
+   * Kann verwendet werden, um den Aufrufer-Thread solange zu pausieren,
+   * bis "stop()" aufgerufen wurde. Damit kann warten, bis die Uebertragung
+   * abgeschlossen ist.
+   */
+  public final synchronized void waitFor()
+  {
+    if (this.thread == null)
+      return;
+    
+    synchronized (this.thread)
+    {
+      if (this.thread == null)
+        return;
+      
+      try
+      {
+        this.thread.wait();
+      }
+      catch (InterruptedException e)
+      {
+        // Wir sind raus.
+      }
+    }
+  }
+}
+
+
+
+/**********************************************************************
+ * $Log: 22-hbci4java-chiptan-opt.patch,v $
+ * Revision 1.1  2011/05/27 10:28:38  willuhn
+ * @N 22-hbci4java-chiptan-opt.patch
+ *
+ **********************************************************************/
\ No newline at end of file
Index: src/org/kapott/hbci/passport/HBCIPassportPinTan.java
===================================================================
RCS file: /cvsroot/hibiscus/hbci4java/src/org/kapott/hbci/passport/HBCIPassportPinTan.java,v
retrieving revision 1.2
diff -u -r1.2 HBCIPassportPinTan.java
--- src/org/kapott/hbci/passport/HBCIPassportPinTan.java	13 May 2011 15:31:38 -0000	1.2
+++ src/org/kapott/hbci/passport/HBCIPassportPinTan.java	27 May 2011 10:22:01 -0000
@@ -41,6 +41,7 @@
 import org.kapott.hbci.callback.HBCICallback;
 import org.kapott.hbci.exceptions.HBCI_Exception;
 import org.kapott.hbci.exceptions.InvalidPassphraseException;
+import org.kapott.hbci.manager.FlickerCode;
 import org.kapott.hbci.manager.HBCIUtils;
 import org.kapott.hbci.manager.HBCIUtilsInternal;
 import org.kapott.hbci.manager.LogFilter;
@@ -343,9 +344,10 @@
                 String challenge=(String)getPersistentData("pintan_challenge");
                 setPersistentData("pintan_challenge",null);
                 
-                // willuhn 2011-05-09 HHD UC aus dem Passport holen
-                String hhdUc = (String) getPersistentData("pintan_challenge_hhd_uc");
-                setPersistentData("pintan_challenge_hhd_uc",null);
+                // willuhn 2011-05-27 Wir versuchen, den Flickercode zu ermitteln und zu parsen
+                String hhduc = (String) getPersistentData("pintan_challenge_hhd_uc");
+                setPersistentData("pintan_challenge_hhd_uc",null); // gleich wieder aus dem Passport loeschen
+                String flicker = parseFlickercode(challenge,hhduc);
                 
                 if (challenge==null) {
                     // es gibt noch keine challenge
@@ -354,10 +356,9 @@
                     HBCIUtils.log("found challenge in passport, so we ask for a TAN",HBCIUtils.LOG_DEBUG);
                     // es gibt eine challenge, also damit tan ermitteln
                     
-                    // willuhn 2011-05-09: Wir uebergeben HHD UC erstmal direkt hier - bei NEED_PT_SECMECH
-                    // wird das ja auch so gemacht. Sollte hier spaeter noch mehr uebergeben werden,
-                    // kann man das ja sicher noch aendern.
-                    StringBuffer s = hhdUc != null ? new StringBuffer(hhdUc) : new StringBuffer();
+                    // willuhn 2011-05-27: Flicker-Code uebergeben, falls vorhanden
+                    // bei NEED_PT_SECMECH wird das auch so gemacht.
+                    StringBuffer s = flicker != null ? new StringBuffer(flicker) : new StringBuffer();
                     HBCIUtilsInternal.getCallback().callback(this,
                         HBCICallback.NEED_PT_TAN,
                         secmechInfo.getProperty("name")+" "+secmechInfo.getProperty("inputinfo")+": "+challenge,
@@ -378,6 +379,58 @@
             throw new HBCI_Exception("*** signing failed",ex);
         }
     }
+    
+    /**
+     * Versucht, aus Challenge und Challenge HHDuc den Flicker-Code zu extrahieren
+     * und ihn in einen flickerfaehigen Code umzuwandeln.
+     * Nur wenn tatsaechlich ein gueltiger Code enthalten ist, der als
+     * HHDuc-Code geparst und in einen Flicker-Code umgewandelt werden konnte,
+     * liefert die Funktion den Code. Sonst immer NULL.
+     * @param challenge der Challenge-Text. Das DE "Challenge HHDuc" gibt es
+     * erst seit HITAN4. Einige Banken haben aber schon vorher optisches chipTAN
+     * gemacht. Die haben das HHDuc dann direkt im Freitext des Challenge
+     * mitgeschickt (mit String-Tokens zum Extrahieren markiert). Die werden vom
+     * FlickerCode-Parser auch unterstuetzt.
+     * @param hhduc das echte Challenge HHDuc.
+     * @return der geparste und in Flicker-Format konvertierte Code oder NULL.
+     */
+    private String parseFlickercode(String challenge, String hhduc)
+    {
+      // 1. Prioritaet hat hhduc. Gibts aber erst seit HITAN4
+      if (hhduc != null && hhduc.trim().length() > 0)
+      {
+        try
+        {
+          FlickerCode code = new FlickerCode(hhduc);
+          return code.render();
+        }
+        catch (Exception e)
+        {
+          HBCIUtils.log("unable to parse Challenge HHDuc " + hhduc + ":" + HBCIUtils.exception2String(e),HBCIUtils.LOG_DEBUG);
+        }
+      }
+      
+      // 2. Checken, ob im Freitext-Challenge was parse-faehiges steht.
+      // Kann seit HITAN1 auftreten
+      if (challenge != null && challenge.trim().length() > 0)
+      {
+        try
+        {
+          FlickerCode code = new FlickerCode(challenge);
+          return code.render();
+        }
+        catch (Exception e)
+        {
+          // Das darf durchaus vorkommen, weil das Challenge auch bei manuellem
+          // chipTAN- und smsTAN Verfahren verwendet wird, wo gar kein Flicker-Code enthalten ist.
+          // Wir loggen es aber trotzdem - fuer den Fall, dass tatsaechlich ein Flicker-Code
+          // enthalten ist. Sonst koennen wir das nicht debuggen.
+          HBCIUtils.log("challenge contains no HHDuc (no problem in most cases):" + HBCIUtils.exception2String(e),HBCIUtils.LOG_DEBUG2);
+        }
+      }
+      // Ne, definitiv kein Flicker-Code.
+      return null;
+    }
 
     public boolean verify(byte[] data,byte[] sig)
     {
