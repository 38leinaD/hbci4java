Index: src/org/kapott/hbci/passport/HBCIPassportRDHNew.java
===================================================================
RCS file: /cvsroot/hibiscus/hbci4java/src/org/kapott/hbci/passport/HBCIPassportRDHNew.java,v
retrieving revision 1.1
diff -u -r1.1 HBCIPassportRDHNew.java
--- src/org/kapott/hbci/passport/HBCIPassportRDHNew.java	4 May 2011 22:37:43 -0000	1.1
+++ src/org/kapott/hbci/passport/HBCIPassportRDHNew.java	25 May 2011 10:06:28 -0000
@@ -21,6 +21,7 @@
 
 package org.kapott.hbci.passport;
 
+import java.io.CharConversionException;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
@@ -152,7 +153,18 @@
                     try {
                         ci=new CipherInputStream(new FileInputStream(getFilename()),cipher);
                         root=db.parse(ci).getDocumentElement();
-                    } catch (SAXException e) {
+                    } catch (Exception e) {
+                      
+                        // willuhn 2011-05-25 Wir lassen einen erneuten Versuch nur bei einer der beiden
+                        // folgenden Exceptions zu. 
+                        // Die "CharConversionException" ist in der Praxis eine
+                        // " com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: Invalid byte 2 of 2-byte UTF-8 sequence."
+                        // Sie fliegt in "db.parse()". Sprich: Der CipherInputStream kann nicht erkennen,
+                        // ob das Passwort falsch ist. Stattdessen decodiert er einfach Muell, der
+                        // anschliessend nicht als XML-Dokument gelesen werden kann
+                        if (!(e instanceof SAXException) && !(e instanceof CharConversionException))
+                          throw e;
+                        
                         resetPassphrase();
 
                         retries--;
